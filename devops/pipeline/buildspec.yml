version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - yum update -y
      - yum install -y jq nfs-utils
      - pip install awscli
  pre_build:
    commands:
      - echo "Iniciando a fase de pre_build..."
      - echo "Verificando se os recursos já existem..."
      - |
        check_efs() {
          local efs_id=$1
          aws efs describe-file-systems --file-system-id $efs_id >/dev/null 2>&1
        }
      - |
        create_efs_directories() {
          local efs_id=$1
          local directories=$2
          local mount_point="/mnt/efs/$efs_id"
          mkdir -p $mount_point
          mount -t nfs4 -o nfsvers=4.1 $efs_id.efs.$AWS_REGION.amazonaws.com:/ $mount_point
          for dir in ${directories[@]}; do
            mkdir -p $mount_point/$dir
          done
          umount $mount_point
        }
      - |
        EFS_IDS=(
          "fs-03d9f07c751d459fd"  # Replace with your actual EFS IDs
          "fs-0a1b2c3d4e5f67890"  # Replace with your actual EFS IDs
          "fs-1a2b3c4d5e6f78901"  # Replace with your actual EFS IDs
          "fs-2a3b4c5d6e7f89012"  # Replace with your actual EFS IDs
        )
        EFS_DIRECTORIES=(
          "/var/tempo/traces"
          "/var/loki/index"
          "/var/loki/cache"
          "/var/loki/chunks"
          "/var/lib/grafana/data"
          "/var/lib/grafana/plugins"
          "/var/log/grafana"
        )
        for efs_id in "${EFS_IDS[@]}"; do
          if check_efs $efs_id; then
            echo "EFS $efs_id já existe."
            create_efs_directories $efs_id "${EFS_DIRECTORIES[@]}"
          else
            echo "EFS $efs_id não existe ainda."
          fi
        done
  build:
    commands:
      - echo "Iniciando o build..."
      - echo "Verificando a versão do jq"
      - jq --version
      - echo "Buscando secrets do AWS Secrets Manager"
      - |
        SECRETS=$(aws secretsmanager get-secret-value --secret-id dev/grafana/config --query SecretString --output text)
        ADMIN_USER=$(echo $SECRETS | jq -r '.GRAFANA_ADMIN_USER')
        ADMIN_PASSWORD=$(echo $SECRETS | jq -r '.GRAFANA_ADMIN_PASSWD')
      - echo "Substituindo credenciais no grafana.ini"
      - sed -i "s/ADMINUSER/${ADMIN_USER}/g" devops/configurationFiles/grafana.ini
      - sed -i "s/ADMINPASSWD/${ADMIN_PASSWORD}/g" devops/configurationFiles/grafana.ini
      - echo "Validando o template CloudFormation"
      - aws cloudformation validate-template --template-body file://grafana-stack.yaml
      - echo "Lendo parâmetros do arquivo parameters.json"
      - PARAMETER_OVERRIDES=$(jq -r '.[] | "\(.ParameterKey)=\(.ParameterValue)"' devops/variables/parameters.json)
      - echo "Fazendo deploy do stack CloudFormation"
      - |
        aws cloudformation deploy \
          --template-file grafana-stack.yaml \
          --stack-name grafana-stack \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides $PARAMETER_OVERRIDES
      - echo "Exibindo mudanças feitas no stack CloudFormation"
      - aws cloudformation describe-stack-events --stack-name grafana-stack --query 'StackEvents[?ResourceStatus==`UPDATE_COMPLETE`].{Resource:LogicalResourceId,Status:ResourceStatus,Reason:ResourceStatusReason}' --output table
  post_build:
    commands:
      - echo "Iniciando a fase de post_build..."
      - echo "Reiniciando containers para aplicar novas configurações"
      - aws ecs update-service --cluster dev-backend-services --service grafana-service --force-new-deployment

artifacts:
  files:
    - grafana-stack.yaml
    - devops/variables/parameters.json
    - devops/configurationFiles/grafana.ini
    - devops/configurationFiles/tempo.yaml
    - devops/configurationFiles/loki.yaml
    - devops/configurationFiles/prometheus.yaml
