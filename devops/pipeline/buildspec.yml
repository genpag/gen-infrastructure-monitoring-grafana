version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - yum update -y
      - yum install -y jq nfs-utils
      - pip install awscli
  pre_build:
    commands:
      - echo 'Iniciando a fase de pre_build...'
      - echo 'Verificando se os sistemas de arquivos EFS já existem...'
      - |
        check_efs() {
          local efs_id=$1
          aws efs describe-file-systems --file-system-id $efs_id >/dev/null 2>&1
        }
      - echo 'Verificando se o stack efs-stack existe...'
      - |
        if ! aws cloudformation describe-stacks --stack-name efs-stack >/dev/null 2>&1; then
          echo 'Stack efs-stack não encontrado, criando stack...'
          aws cloudformation deploy \
            --template-file devops/configurationFiles/efs-stack.yaml \
            --stack-name efs-stack \
            --capabilities CAPABILITY_NAMED_IAM
        else
          echo 'Stack efs-stack já existe.'
        fi
      - echo 'Buscando IDs dos sistemas de arquivos EFS do stack efs-stack...'
      - |
        GRAFANA_EFS_ID=$(aws cloudformation describe-stacks --stack-name efs-stack --query 'Stacks[0].Outputs[?OutputKey==`GrafanaEFSFileSystemId`].OutputValue' --output text)
        TEMPO_EFS_ID=$(aws cloudformation describe-stacks --stack-name efs-stack --query 'Stacks[0].Outputs[?OutputKey==`TempoEFSFileSystemId`].OutputValue' --output text)
        LOKI_EFS_ID=$(aws cloudformation describe-stacks --stack-name efs-stack --query 'Stacks[0].Outputs[?OutputKey==`LokiEFSFileSystemId`].OutputValue' --output text)
        PROMETHEUS_EFS_ID=$(aws cloudformation describe-stacks --stack-name efs-stack --query 'Stacks[0].Outputs[?OutputKey==`PrometheusEFSFileSystemId`].OutputValue' --output text)
      - echo "IDs dos sistemas de arquivos EFS obtidos:"
      - echo "Grafana EFS ID:" && echo $GRAFANA_EFS_ID
      - echo "Tempo EFS ID:" && echo $TEMPO_EFS_ID
      - echo "Loki EFS ID:" && echo $LOKI_EFS_ID
      - echo "Prometheus EFS ID:" && echo $PROMETHEUS_EFS_ID
      - echo "Criando diretórios necessários nos sistemas de arquivos EFS..."
      - |
        EFS_IDS=(
          "$GRAFANA_EFS_ID"
          "$TEMPO_EFS_ID"
          "$LOKI_EFS_ID"
          "$PROMETHEUS_EFS_ID"
        )
        EFS_DIRECTORIES=(
          "/var/tempo/traces"
          "/var/loki/index"
          "/var/loki/cache"
          "/var/loki/chunks"
          "/var/lib/grafana/data"
          "/var/lib/grafana/plugins"
          "/var/log/grafana"
        )
        create_efs_directories() {
          local efs_id=$1
          local directories=$2
          local mount_point="/mnt/efs/$efs_id"
          sudo mkdir -p $mount_point
          sudo mount -t efs -o tls $efs_id:/ $mount_point
          for dir in ${directories[@]}; do
            sudo mkdir -p $mount_point/$dir
          done
          sudo umount $mount_point
        }
        export AWS_REGION=us-east-2
        if [ -z "$AWS_REGION" ]; then
          echo "AWS_REGION is not set. Exiting..."
          exit 1
        fi
        for efs_id in "${EFS_IDS[@]}"; do
          if [ -n "$efs_id" ]; then
            echo "Criando diretórios no EFS $efs_id..."
            create_efs_directories $efs_id "${EFS_DIRECTORIES[@]}"
          else
            echo "EFS ID não encontrado."
          fi
        done
  build:
    commands:
      - echo 'Iniciando o build...'
      - echo 'Verificando a versão do jq'
      - jq --version
      - echo 'Buscando secrets do AWS Secrets Manager'
      - |
        SECRETS=$(aws secretsmanager get-secret-value --secret-id dev/grafana/config --query SecretString --output text)
        ADMIN_USER=$(echo $SECRETS | jq -r '.GRAFANA_ADMIN_USER')
        ADMIN_PASSWORD=$(echo $SECRETS | jq -r '.GRAFANA_ADMIN_PASSWD')
      - echo 'Substituindo credenciais no grafana.ini'
      - sed -i "s/ADMINUSER/${ADMIN_USER}/g" devops/configurationFiles/grafana.ini
      - sed -i "s/ADMINPASSWD/${ADMIN_PASSWORD}/g" devops/configurationFiles/grafana.ini
      - echo 'Validando o template CloudFormation'
      - aws cloudformation validate-template --template-body file://grafana-stack.yaml
      - echo 'Lendo parâmetros do arquivo parameters.json'
      - |
        PARAMETER_OVERRIDES=$(jq -r '.[] | "\(.ParameterKey)=\(.ParameterValue)"' devops/variables/parameters.json)
      - echo 'Fazendo deploy do stack CloudFormation'
      - |
        aws cloudformation deploy \
          --template-file grafana-stack.yaml \
          --stack-name grafana-stack \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides $PARAMETER_OVERRIDES
      - echo 'Exibindo mudanças feitas no stack CloudFormation'
      - aws cloudformation describe-stack-events --stack-name grafana-stack --query 'StackEvents[?ResourceStatus==`UPDATE_COMPLETE`].{Resource:LogicalResourceId,Status:ResourceStatus,Reason:ResourceStatusReason}' --output table
  post_build:
    commands:
      - echo 'Iniciando a fase de post_build...'
      - echo 'Reiniciando containers para aplicar novas configurações'
      - aws ecs update-service --cluster dev-backend-services --service grafana-service --force-new-deployment

artifacts:
  files:
    - grafana-stack.yaml
    - devops/variables/parameters.json
    - devops/configurationFiles/grafana.ini
    - devops/configurationFiles/tempo.yaml
    - devops/configurationFiles/loki.yaml
    - devops/configurationFiles/prometheus.yaml