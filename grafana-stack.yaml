AWSTemplateFormatVersion: 2010-09-09
Description: Deploy do Grafana e outras ferramentas no AWS ECS com CloudFormation

Parameters:
  ClusterName:
    Type: String
    Description: Nome do cluster ECS existente
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID da VPC onde os recursos serao provisionados
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Lista de IDs das Subnets para o servico ECS
  GrafanaImage:
    Type: String
    Default: grafana/grafana:latest
    Description: Imagem Docker do Grafana
  Cpu:
    Type: Number
    Default: 512
    Description: CPU units para a task
  Memory:
    Type: Number
    Default: 1024
    Description: Memoria em MiB para a task
  DesiredCount:
    Type: Number
    Default: 1
    Description: Numero desejado de instancias da task
  TempoImage:
    Type: String
    Default: grafana/tempo:latest
    Description: Imagem Docker do Tempo
  LokiImage:
    Type: String
    Default: grafana/loki:latest
    Description: Imagem Docker do Loki
  PrometheusImage:
    Type: String
    Default: prom/prometheus:latest
    Description: Imagem Docker do Prometheus
  DomainName:
    Type: String
    Description: Nome de dominio para o registro no Route 53
  HostedZoneId:
    Type: String
    Description: ID da Hosted Zone do Route 53

Resources:
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  GrafanaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/monitoring
      RetentionInDays: 14

  GrafanaServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group para o servico ECS do Grafana
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
  
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Select [0, !Ref SubnetIds]
      SecurityGroups:
        - !Ref EFSSecurityGroup
  
  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Select [1, !Ref SubnetIds]
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group para o EFS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0

  GrafanaLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub grafana-alb-${AWS::StackName}
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref GrafanaALBSecurityGroup
      Type: application
    DependsOn: GrafanaALBSecurityGroup

  GrafanaALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group para o ALB do Grafana
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  GrafanaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tg-grafana-stack
      Protocol: HTTP
      Port: 3000
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
    DependsOn: GrafanaLoadBalancer

  GrafanaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref GrafanaLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GrafanaTargetGroup
    DependsOn: GrafanaTargetGroup

  GrafanaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: grafana-stack
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: grafana
          Image: !Ref GrafanaImage
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/monitoring
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: grafana
          Environment:
            - Name: GF_INSTALL_PLUGINS
              Value: aws-datasource-provisioner-app
          MountPoints:
            - SourceVolume: grafana-config
              ContainerPath: /var/lib/grafana
        - Name: tempo
          Image: !Ref TempoImage
          Essential: true
          PortMappings:
            - ContainerPort: 3200
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/monitoring
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: tempo
          MountPoints:
            - SourceVolume: tempo-config
              ContainerPath: /var/lib/tempo
        - Name: loki
          Image: !Ref LokiImage
          Essential: true
          PortMappings:
            - ContainerPort: 3100
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/monitoring
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: loki
          MountPoints:
            - SourceVolume: loki-config
              ContainerPath: /var/lib/loki
        - Name: prometheus
          Image: !Ref PrometheusImage
          Essential: true
          PortMappings:
            - ContainerPort: 9090
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/monitoring
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: prometheus
          MountPoints:
            - SourceVolume: prometheus-config
              ContainerPath: /var/lib/prometheus
      Volumes:
        - Name: grafana-config
          EfsVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /
        - Name: tempo-config
          EfsVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /
        - Name: loki-config
          EfsVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /
        - Name: prometheus-config
          EfsVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /
    DependsOn: GrafanaListener

  GrafanaService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      ServiceName: grafana-service
      TaskDefinition: !Ref GrafanaTaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt GrafanaServiceSecurityGroup.GroupId
          Subnets: !Ref SubnetIds
      LoadBalancers:
        - ContainerName: grafana
          ContainerPort: 3000
          TargetGroupArn: !Ref GrafanaTargetGroup
    DependsOn: GrafanaTaskDefinition

  GrafanaDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt GrafanaLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt GrafanaLoadBalancer.DNSName

Outputs:
  GrafanaURL:
    Description: URL do Grafana acess√≠vel via Route 53
    Value: !Ref DomainName
