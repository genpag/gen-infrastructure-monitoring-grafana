AWSTemplateFormatVersion: 2010-09-09
Description: Deploy do Grafana e outras ferramentas no AWS ECS com CloudFormation

Parameters:
  ClusterName:
    Type: String
    Description: Nome do cluster ECS existente
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID da VPC onde os recursos serao provisionados
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Lista de IDs das Subnets para o servico ECS
  GrafanaImage:
    Type: String
    Default: grafana/grafana:latest
    Description: Imagem Docker do Grafana
  Cpu:
    Type: Number
    Description: CPU units para a task
  Memory:
    Type: Number
    Description: Memoria em MiB para a task
  DesiredCount:
    Type: Number
    Description: Numero desejado de instancias da task
  TempoImage:
    Type: String
    Default: grafana/tempo:latest
    Description: Imagem Docker do Tempo
  LokiImage:
    Type: String
    Default: grafana/loki:latest
    Description: Imagem Docker do Loki
  PrometheusImage:
    Type: String
    Default: prom/prometheus:latest
    Description: Imagem Docker do Prometheus
  DomainName:
    Type: String
    Description: Nome de dominio para o registro no Route 53
  HostedZoneId:
    Type: String
    Description: ID da Hosted Zone do Route 53

Resources:
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  GrafanaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/monitoring
      RetentionInDays: 14

  GrafanaServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group para o servico ECS do Grafana
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  GrafanaLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub grafana-alb-${AWS::StackName}
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref GrafanaALBSecurityGroup
      Type: application
    DependsOn: GrafanaALBSecurityGroup

  GrafanaALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group para o ALB do Grafana
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  GrafanaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tg-grafana-stack
      Protocol: HTTP
      Port: 3000
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
    DependsOn: GrafanaLoadBalancer

  TempoTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tg-tempo-stack
      Protocol: HTTP
      Port: 3200
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
    DependsOn: GrafanaLoadBalancer

  LokiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tg-loki-stack
      Protocol: HTTP
      Port: 3100
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
    DependsOn: GrafanaLoadBalancer

  PrometheusTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tg-prometheus-stack
      Protocol: HTTP
      Port: 9090
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
    DependsOn: GrafanaLoadBalancer

  GrafanaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref GrafanaLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GrafanaTargetGroup
    DependsOn: GrafanaTargetGroup

  GrafanaListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref GrafanaListener
      Conditions:
        - Field: path-pattern
          Values: ["/"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref GrafanaTargetGroup
      Priority: 1

  TempoListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref GrafanaListener
      Conditions:
        - Field: path-pattern
          Values: ["/tempo/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TempoTargetGroup
      Priority: 2

  LokiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref GrafanaListener
      Conditions:
        - Field: path-pattern
          Values: ["/loki/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LokiTargetGroup
      Priority: 3

  PrometheusListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref GrafanaListener
      Conditions:
        - Field: path-pattern
          Values: ["/prometheus/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref PrometheusTargetGroup
      Priority: 4

  GrafanaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: grafana-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: grafana
          Image: !Ref GrafanaImage
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/monitoring
              awslogs-region: us-east-2
              awslogs-stream-prefix: grafana
          Environment:
            - Name: GRAFANA_INI
              Value: !Sub |
                ${!file devops/configurationFiles/grafana.ini}
          Command: ["/bin/sh", "-c", "echo \"$GRAFANA_INI\" > /etc/grafana/grafana.ini && /run.sh"]
        - Name: loki
          Image: !Ref LokiImage
          Essential: true
          PortMappings:
            - ContainerPort: 3100
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/monitoring
              awslogs-region: us-east-2
              awslogs-stream-prefix: loki
          Environment:
            - Name: LOKI_YAML
              Value: !Sub |
                ${!file devops/configurationFiles/loki.yaml}
          Command: ["/bin/sh", "-c", "echo \"$LOKI_YAML\" > /etc/loki/loki.yaml && /run.sh"]
        - Name: tempo
          Image: !Ref TempoImage
          Essential: false
          PortMappings:
            - ContainerPort: 3200
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/monitoring
              awslogs-region: us-east-2
              awslogs-stream-prefix: tempo
          Environment:
            - Name: TEMPO_YAML
              Value: !Sub |
                ${!file devops/configurationFiles/tempo.yaml}
          Command: ["/bin/sh", "-c", "echo \"$TEMPO_YAML\" > /etc/tempo/tempo.yaml && /run.sh"]
        - Name: prometheus
          Image: !Ref PrometheusImage
          Essential: true
          PortMappings:
            - ContainerPort: 9090
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/monitoring
              awslogs-region: us-east-2
              awslogs-stream-prefix: prometheus
          Environment:
            - Name: PROMETHEUS_YAML
              Value: !Sub |
                ${!file devops/configurationFiles/prometheus.yaml}
          Command: ["/bin/sh", "-c", "echo \"$PROMETHEUS_YAML\" > /etc/prometheus/prometheus.yaml && /run.sh"]

  GrafanaService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      ServiceName: grafana-service
      TaskDefinition: !Ref GrafanaTaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt GrafanaServiceSecurityGroup.GroupId
          Subnets: !Ref SubnetIds
      LoadBalancers:
        - ContainerName: grafana
          ContainerPort: 3000
          TargetGroupArn: !Ref GrafanaTargetGroup
        - ContainerName: loki
          ContainerPort: 3100
          TargetGroupArn: !Ref LokiTargetGroup
        - ContainerName: tempo
          ContainerPort: 3200
          TargetGroupArn: !Ref TempoTargetGroup
        - ContainerName: prometheus
          ContainerPort: 9090
          TargetGroupArn: !Ref PrometheusTargetGroup
    DependsOn: 
      - GrafanaTaskDefinition
      - GrafanaListener
      - TempoListenerRule
      - LokiListenerRule
      - PrometheusListenerRule

  GrafanaDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: monitoring.dev.gen.com.br
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt GrafanaLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt GrafanaLoadBalancer.DNSName

Outputs:
  GrafanaURL:
    Description: URL do Grafana acessível via Route 53
    Value: monitoring.dev.gen.com.br
